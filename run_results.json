{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-04-18T23:31:13.361048Z", "invocation_id": "11455461-55ff-42bc-887e-80772430635e", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-18T23:31:11.863054Z", "completed_at": "2025-04-18T23:31:11.865048Z"}, {"name": "execute", "started_at": "2025-04-18T23:31:11.881006Z", "completed_at": "2025-04-18T23:31:11.881006Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.036901235580444336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.Business_Int.port_coordinates", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-18T23:31:11.865048Z", "completed_at": "2025-04-18T23:31:11.867043Z"}, {"name": "execute", "started_at": "2025-04-18T23:31:11.882003Z", "completed_at": "2025-04-18T23:31:11.882003Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03789925575256348, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.Business_Int.shipments_raw", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-18T23:31:11.849091Z", "completed_at": "2025-04-18T23:31:11.882003Z"}, {"name": "execute", "started_at": "2025-04-18T23:31:11.883998Z", "completed_at": "2025-04-18T23:31:11.883998Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04089045524597168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Business_Int.stg_shipping_insights", "compiled": true, "compiled_code": "\n\nwith src as (\n\n  select\n    shipment_unique_key,\n    container_nbr,\n    shipment_type,\n    shipment_status,\n    voyage_number,\n    transshipment_cnt,\n\n    -- Shipper details\n    shipper_nme,\n    shipper_exchange_name,\n    shipper_ticker,\n    shipper_duns,\n    shipper_address,\n    shipper_city_nme,\n    shipper_state_nme,\n    shipper_postal_code,\n    shipper_country_nme,\n    shipper_phone_nbr,\n    shipper_sic4,\n\n    -- Requester details\n    requester_nme,\n    requester_exchange_name,\n    requester_ticker,\n    requester_duns,\n    requester_address,\n    requester_city_nme,\n    requester_state_nme,\n    requester_postal_code,\n    requester_country_nme,\n    requester_phone_nbr,\n    requester_sic4,\n\n    -- Secondary notify party\n    second_notify_party_nme,\n    second_notify_party_exchange_name,\n    second_notify_party_ticker,\n    second_notify_party_duns,\n    second_notify_party_address,\n    second_notify_party_city_nme,\n    second_notify_party_state_nme,\n    second_notify_party_postal_code,\n    second_notify_party_country_nme,\n    second_notify_party_phone_nbr,\n    second_notify_party_sic4,\n\n    -- Tertiary notify party\n    third_notify_party_nme,\n    third_notify_party_exchange_name,\n    third_notify_party_ticker,\n    third_notify_party_duns,\n    third_notify_party_address,\n    third_notify_party_city_nme,\n    third_notify_party_state_nme,\n    third_notify_party_postal_code,\n    third_notify_party_country_nme,\n    third_notify_party_phone_nbr,\n    third_notify_party_sic4,\n\n    -- Port of Receipt (Pickup) details\n    plor_unlocode,\n    plor_city_nme,\n    plor_country_nme,\n    plor_est_departure_tme,\n\n    -- Standardized port codes for analytics\n    departure_port_unlocode   as origin_port_code,\n    departure_port_city_nme   as origin_port_city,\n    departure_port_country_nme as origin_port_country,\n\n    destination_port_unlocode   as dest_port_code,\n    destination_port_city_nme    as dest_port_city,\n    destination_port_country_nme as dest_port_country,\n\n    -- Estimated vs actual timings\n    est_departure_tme,\n    est_arrival_tme,\n\n    -- Vessel & voyage details\n    vessel_nme,\n    vessel_imo_number,\n    vessel_load_tme,\n    vessel_departure_tme,\n    vessel_unload_tme,\n    vessel_arrival_tme,\n\n    -- Container return timestamp\n    return_tme,\n\n    -- Computed delay metrics (in hours)\n    timestampdiff(second, est_arrival_tme, vessel_arrival_tme)    / 3600.0 as arrival_delay_hours,\n    timestampdiff(second, est_departure_tme, vessel_departure_tme)/ 3600.0 as departure_delay_hours,\n\n    -- Transshipment flag\n    case when transshipment_cnt > 0 then true else false end as is_transshipped,\n\n    -- Surrogate key for joins\n    md5(shipment_unique_key || container_nbr) as shipment_sk,\n\n    -- Load timestamp for incremental logic\n    entry_tme\n\n  from BUSINESS_INT_DBT.PUBLIC.shipments_raw\n\n  \n    where entry_tme > (select max(entry_tme) from BUSINESS_INT_DBT.PUBLIC_staging.stg_shipping_insights)\n  \n\n)\n\nselect * from src", "relation_name": "BUSINESS_INT_DBT.PUBLIC_staging.stg_shipping_insights", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-18T23:31:11.868040Z", "completed_at": "2025-04-18T23:31:11.884995Z"}, {"name": "execute", "started_at": "2025-04-18T23:31:11.887988Z", "completed_at": "2025-04-18T23:31:11.887988Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04288601875305176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.Business_Int.source_not_null_dnb_shipping_insights_shipments_raw_entry_tme.22bc5490ea", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect entry_tme\nfrom BUSINESS_INT_DBT.PUBLIC.shipments_raw\nwhere entry_tme is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-18T23:31:11.891976Z", "completed_at": "2025-04-18T23:31:11.909928Z"}, {"name": "execute", "started_at": "2025-04-18T23:31:11.910926Z", "completed_at": "2025-04-18T23:31:11.910926Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0249326229095459, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.Business_Int.source_not_null_dnb_shipping_insights_shipments_raw_shipment_unique_key.8160649d4d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shipment_unique_key\nfrom BUSINESS_INT_DBT.PUBLIC.shipments_raw\nwhere shipment_unique_key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-18T23:31:11.897961Z", "completed_at": "2025-04-18T23:31:11.911923Z"}, {"name": "execute", "started_at": "2025-04-18T23:31:11.918906Z", "completed_at": "2025-04-18T23:31:11.918906Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02992105484008789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.Business_Int.source_unique_dnb_shipping_insights_shipments_raw_shipment_unique_key.af0f113ea1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    shipment_unique_key as unique_field,\n    count(*) as n_records\n\nfrom BUSINESS_INT_DBT.PUBLIC.shipments_raw\nwhere shipment_unique_key is not null\ngroup by shipment_unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-18T23:31:11.904941Z", "completed_at": "2025-04-18T23:31:11.912921Z"}, {"name": "execute", "started_at": "2025-04-18T23:31:11.919902Z", "completed_at": "2025-04-18T23:31:11.919902Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.029920578002929688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Business_Int.dim_port", "compiled": true, "compiled_code": "\n\nwith port_base as (\n  -- Collect all origin ports\n  select distinct\n         origin_port_code as port_code,\n         origin_port_city as port_city,\n         origin_port_country as port_country,\n         'Origin' as port_role\n  from BUSINESS_INT_DBT.PUBLIC_staging.stg_shipping_insights\n  where origin_port_code is not null\n\n  union all\n\n  -- Collect all destination ports\n  select distinct\n         dest_port_code as port_code,\n         dest_port_city as port_city,\n         dest_port_country as port_country,\n         'Destination' as port_role\n  from BUSINESS_INT_DBT.PUBLIC_staging.stg_shipping_insights\n  where dest_port_code is not null\n),\n\n-- Deduplicate ports while maintaining role information\nport_consolidated as (\n  select\n    port_code,\n    max(port_city) as port_city,\n    max(port_country) as port_country,\n    array_agg(distinct port_role) as port_roles\n  from port_base\n  group by port_code\n),\n\n-- Join with port coordinates from seed file\nports_with_coordinates as (\n  select\n    p.port_code,\n    p.port_city,\n    p.port_country,\n    array_to_string(p.port_roles, ', ') as port_roles_list,\n    c.latitude,\n    c.longitude\n  from port_consolidated p\n  left join BUSINESS_INT_DBT.PUBLIC_reference_data.port_coordinates c \n    on p.port_code = c.port_code\n)\n\n-- Final output with surrogate key\nselect\n    md5(port_code) as port_id,\n    port_code,\n    port_city,\n    port_country,\n    port_roles_list,\n    latitude,\n    longitude,\n    current_timestamp() as load_ts\nfrom ports_with_coordinates", "relation_name": "BUSINESS_INT_DBT.PUBLIC_core.dim_port", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-18T23:31:11.912921Z", "completed_at": "2025-04-18T23:31:11.922894Z"}, {"name": "execute", "started_at": "2025-04-18T23:31:11.924889Z", "completed_at": "2025-04-18T23:31:11.924889Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.027925729751586914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Business_Int.dim_vessel", "compiled": true, "compiled_code": "\n\nselect\n    vessel_imo_number,\n    vessel_nme,\n    min(voyage_number)         as first_seen_voyage,\n    count(distinct voyage_number) as voyages_seen\nfrom BUSINESS_INT_DBT.PUBLIC_staging.stg_shipping_insights\nwhere vessel_imo_number is not null\ngroup by 1,2", "relation_name": "BUSINESS_INT_DBT.PUBLIC_core.dim_vessel", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-18T23:31:11.926883Z", "completed_at": "2025-04-18T23:31:11.938851Z"}, {"name": "execute", "started_at": "2025-04-18T23:31:11.943838Z", "completed_at": "2025-04-18T23:31:11.943838Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.022938013076782227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Business_Int.fct_leg_core", "compiled": true, "compiled_code": "\n\nwith src as (\n\n    select *\n    from BUSINESS_INT_DBT.PUBLIC_staging.stg_shipping_insights\n\n    \n      where entry_tme > (select max(entry_tme) from BUSINESS_INT_DBT.PUBLIC_core.fct_leg_core)\n    \n\n)\n\nselect\n    -- business grain\n    shipment_sk,\n    shipment_unique_key,\n    container_nbr,\n\n    1                                          as leg_sequence,       -- single\u2011leg sample\n\n    origin_port_code                           as departure_port_code,\n    dest_port_code                             as arrival_port_code,\n\n    vessel_departure_tme                       as actual_departure_tme,\n    vessel_arrival_tme                         as actual_arrival_tme,\n    est_departure_tme,\n    est_arrival_tme,\n\n    arrival_delay_hours,\n    departure_delay_hours,\n    transshipment_cnt,\n    is_transshipped,\n\n    -- date grains for clustering/partitioning\n    date(vessel_departure_tme)                 as leg_departure_date,\n    date_trunc('month', vessel_departure_tme::timestamp)  as leg_departure_month,\n    date(vessel_arrival_tme)                   as leg_arrival_date,\n\n    voyage_number,\n    vessel_nme,\n    vessel_imo_number,\n\n    md5(shipment_sk || '|' ||\n        origin_port_code || '|' ||\n        dest_port_code  || '|' ||\n        coalesce(vessel_departure_tme::string,''))  as leg_sk,\n\n    current_timestamp()                        as load_ts\nfrom src", "relation_name": "BUSINESS_INT_DBT.PUBLIC_core.fct_leg_core", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-18T23:31:11.933864Z", "completed_at": "2025-04-18T23:31:11.944835Z"}, {"name": "execute", "started_at": "2025-04-18T23:31:11.946830Z", "completed_at": "2025-04-18T23:31:11.946830Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.021940946578979492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Business_Int.fct_shipment", "compiled": true, "compiled_code": "\n\nwith src as (\n\n    select *\n    from BUSINESS_INT_DBT.PUBLIC_staging.stg_shipping_insights\n\n    \n      where entry_tme > (select max(entry_tme) from BUSINESS_INT_DBT.PUBLIC_core.fct_shipment)\n    \n\n)\n\nselect\n    shipment_sk,\n    shipment_unique_key,\n    container_nbr,\n    1                                   as leg_sequence,\n\n    origin_port_code                    as departure_port_code,\n    dest_port_code                      as arrival_port_code,\n\n    vessel_departure_tme                as actual_departure_tme,\n    vessel_arrival_tme                  as actual_arrival_tme,\n    est_departure_tme,\n    est_arrival_tme,\n\n    arrival_delay_hours,\n    departure_delay_hours,\n    transshipment_cnt,\n    is_transshipped,\n\n    date(vessel_departure_tme)          as leg_departure_date,\n    date_trunc('month', vessel_departure_tme::timestamp) as first_departure_month,\n    date(vessel_arrival_tme)            as leg_arrival_date,\n\n    voyage_number,\n    vessel_nme,\n    vessel_imo_number,\n\n    md5(shipment_sk || '|' ||\n        origin_port_code || '|' ||\n        dest_port_code  || '|' ||\n        coalesce(vessel_departure_tme::string,''))  as leg_sk,\n\n    current_timestamp()                 as load_ts\nfrom src", "relation_name": "BUSINESS_INT_DBT.PUBLIC_core.fct_shipment", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-18T23:31:11.939849Z", "completed_at": "2025-04-18T23:31:11.947828Z"}, {"name": "execute", "started_at": "2025-04-18T23:31:11.952814Z", "completed_at": "2025-04-18T23:31:11.952814Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02792525291442871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Business_Int.dim_destination_port", "compiled": true, "compiled_code": "\n\nselect\n    port_code,\n    port_city,\n    port_country,\n    latitude,\n    longitude,\n    current_timestamp() as load_ts\nfrom BUSINESS_INT_DBT.PUBLIC_core.dim_port\nwhere port_roles_list like '%Destination%'", "relation_name": "BUSINESS_INT_DBT.PUBLIC_core.dim_destination_port", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-18T23:31:11.947828Z", "completed_at": "2025-04-18T23:31:11.955807Z"}, {"name": "execute", "started_at": "2025-04-18T23:31:11.961790Z", "completed_at": "2025-04-18T23:31:11.961790Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.022939205169677734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Business_Int.dim_origin_port", "compiled": true, "compiled_code": "\n\nselect\n    port_code,\n    port_city,\n    port_country,\n    latitude,\n    longitude,\n    current_timestamp() as load_ts\nfrom BUSINESS_INT_DBT.PUBLIC_core.dim_port\nwhere port_roles_list like '%Origin%'", "relation_name": "BUSINESS_INT_DBT.PUBLIC_core.dim_origin_port", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-18T23:31:11.956803Z", "completed_at": "2025-04-18T23:31:11.959795Z"}, {"name": "execute", "started_at": "2025-04-18T23:31:11.963784Z", "completed_at": "2025-04-18T23:31:11.963784Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011967897415161133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.Business_Int.snap_dim_port", "compiled": true, "compiled_code": "\n\n\n\nselect\n    port_code,\n    port_city,\n    port_country\nfrom BUSINESS_INT_DBT.PUBLIC_core.dim_port\n", "relation_name": "BUSINESS_INT_DBT.PUBLIC_snapshots.snap_dim_port", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-18T23:31:11.964782Z", "completed_at": "2025-04-18T23:31:11.971763Z"}, {"name": "execute", "started_at": "2025-04-18T23:31:11.976750Z", "completed_at": "2025-04-18T23:31:11.976750Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.021941184997558594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Business_Int.mart_container_trace", "compiled": true, "compiled_code": "-- models/marts/mart_container_trace.sql\n\n\nwith leg_details as (\n  select\n    shipment_unique_key,\n    container_nbr,\n    leg_sequence,\n    departure_port_code,\n    arrival_port_code,\n    \n    -- Timing details\n    actual_departure_tme,\n    actual_arrival_tme,\n    est_departure_tme,\n    est_arrival_tme,\n    \n    -- Delay metrics\n    arrival_delay_hours,\n    departure_delay_hours,\n    \n    -- Route details\n    voyage_number,\n    vessel_nme,\n    vessel_imo_number\n  from BUSINESS_INT_DBT.PUBLIC_core.fct_leg_core\n),\n\n-- Calculate cumulative delay metrics\ndelay_accumulation as (\n  select\n    *,\n    sum(departure_delay_hours) over (\n      partition by shipment_unique_key \n      order by leg_sequence\n      rows between unbounded preceding and current row\n    ) as cumulative_departure_delay,\n    \n    sum(arrival_delay_hours) over (\n      partition by shipment_unique_key \n      order by leg_sequence\n      rows between unbounded preceding and current row\n    ) as cumulative_arrival_delay\n  from leg_details\n),\n\n-- Enrich with port data\nenriched_trace as (\n  select\n    d.*,\n    dp.port_city as departure_port_city,\n    dp.port_country as departure_country,\n    dp.latitude as departure_latitude,\n    dp.longitude as departure_longitude,\n    \n    ap.port_city as arrival_port_city,\n    ap.port_country as arrival_country,\n    ap.latitude as arrival_latitude,\n    ap.longitude as arrival_longitude,\n    \n    -- Calculate delay categories for visualization\n    case\n      when d.arrival_delay_hours > 48 then 'Severe Delay'\n      when d.arrival_delay_hours > 24 then 'Moderate Delay'\n      when d.arrival_delay_hours > 0 then 'Slight Delay'\n      else 'On Time'\n    end as delay_category\n  from delay_accumulation d\n  left join BUSINESS_INT_DBT.PUBLIC_core.dim_port dp on d.departure_port_code = dp.port_code\n  left join BUSINESS_INT_DBT.PUBLIC_core.dim_port ap on d.arrival_port_code = ap.port_code\n)\n\nselect \n    *,\n    row_number() over (partition by shipment_unique_key order by leg_sequence) as display_order,\n    \n    -- Create a formatted route label for display\n    departure_port_code || ' \u2192 ' || arrival_port_code || \n    ' (' || round(arrival_delay_hours, 1) || 'h)' as route_label,\n    \n    -- Flag high risk legs\n    case \n      when arrival_delay_hours > 72 then true\n      else false\n    end as is_high_risk_leg,\n    \n    current_timestamp() as load_ts\nfrom enriched_trace", "relation_name": "BUSINESS_INT_DBT.PUBLIC_marts.mart_container_trace", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-18T23:31:11.972760Z", "completed_at": "2025-04-18T23:31:11.982733Z"}, {"name": "execute", "started_at": "2025-04-18T23:31:11.983731Z", "completed_at": "2025-04-18T23:31:11.983731Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021940946578979492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Business_Int.mart_kpi_reliability", "compiled": true, "compiled_code": "-- models/marts/mart_kpi_reliability.sql\n\n\n\nwith legs as (\n\n  select\n    shipment_sk,\n    departure_port_code     as origin_port_code,\n    arrival_port_code       as dest_port_code,\n\n    -- cast the VARCHAR timestamp to a true TIMESTAMP for date_trunc\n    cast(actual_departure_tme as timestamp_ntz) as departure_ts,\n\n    arrival_delay_hours,\n    transshipment_cnt\n\n  from BUSINESS_INT_DBT.PUBLIC_core.fct_leg_core\n\n),\n\nkpi as (\n\n  select\n    date_trunc('month', departure_ts)           as snapshot_month,\n    origin_port_code,\n    dest_port_code,\n    count(distinct shipment_sk)                 as shipment_count,\n    100 * avg(case when arrival_delay_hours <= 0 then 1 else 0 end)\n                                                as schedule_reliability_pct,\n    avg(arrival_delay_hours)                    as avg_arrival_delay_h,\n    avg(transshipment_cnt)                      as avg_transshipments,\n    max(arrival_delay_hours)                    as worst_delay_h\n  from legs\n  group by 1, 2, 3\n\n)\n\nselect * from kpi", "relation_name": "BUSINESS_INT_DBT.PUBLIC_marts.mart_kpi_reliability", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-18T23:31:11.977747Z", "completed_at": "2025-04-18T23:31:11.984729Z"}, {"name": "execute", "started_at": "2025-04-18T23:31:11.985727Z", "completed_at": "2025-04-18T23:31:11.985727Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014961004257202148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Business_Int.mart_port_performance", "compiled": true, "compiled_code": "-- models/marts/mart_port_performance.sql\n\n\nwith quarterly_performance as (\n  select\n    date_trunc('quarter', cast(actual_departure_tme as timestamp_ntz)) as snapshot_quarter,\n    departure_port_code as port_code,\n    'Origin' as port_role,\n    count(*) as shipment_count,\n    avg(departure_delay_hours) as avg_delay_hours,\n    median(departure_delay_hours) as median_delay_hours,\n    sum(case when departure_delay_hours <= 0 then 1 else 0 end)::float / \n      nullif(count(*), 0) * 100 as on_time_pct\n  from BUSINESS_INT_DBT.PUBLIC_core.fct_leg_core\n  where actual_departure_tme is not null\n  group by 1, 2, 3\n  \n  union all\n  \n  select\n    date_trunc('quarter', cast(actual_arrival_tme as timestamp_ntz)) as snapshot_quarter,\n    arrival_port_code as port_code,\n    'Destination' as port_role,\n    count(*) as shipment_count,\n    avg(arrival_delay_hours) as avg_delay_hours,\n    median(arrival_delay_hours) as median_delay_hours,\n    sum(case when arrival_delay_hours <= 0 then 1 else 0 end)::float / \n      nullif(count(*), 0) * 100 as on_time_pct\n  from BUSINESS_INT_DBT.PUBLIC_core.fct_leg_core\n  where actual_arrival_tme is not null\n  group by 1, 2, 3\n),\n\nport_trends as (\n  select\n    port_code,\n    port_role,\n    snapshot_quarter,\n    shipment_count,\n    avg_delay_hours,\n    median_delay_hours,\n    on_time_pct,\n    \n    -- Calculate trend metrics over previous quarters\n    lag(avg_delay_hours, 1) over (\n      partition by port_code, port_role \n      order by snapshot_quarter\n    ) as prev_qtr_delay,\n    \n    lag(avg_delay_hours, 2) over (\n      partition by port_code, port_role \n      order by snapshot_quarter\n    ) as prev_2qtr_delay,\n    \n    lag(avg_delay_hours, 3) over (\n      partition by port_code, port_role \n      order by snapshot_quarter\n    ) as prev_3qtr_delay,\n    \n    lag(avg_delay_hours, 4) over (\n      partition by port_code, port_role \n      order by snapshot_quarter\n    ) as prev_year_delay,\n    \n    -- Calculate Z-score for congestion index (higher is worse)\n    (avg_delay_hours - \n      avg(avg_delay_hours) over (\n        partition by snapshot_quarter, port_role\n      )) / \n      nullif(stddev(avg_delay_hours) over (\n        partition by snapshot_quarter, port_role\n      ), 0) as congestion_z_score\n  from quarterly_performance\n),\n\n-- Calculate trend using simple average rate of change over last 3 quarters\ntrend_calculation as (\n  select\n    *,\n    case\n      when prev_3qtr_delay is not null then \n        (avg_delay_hours - prev_3qtr_delay) / 3  -- Average change per quarter over last 3 quarters\n      when prev_2qtr_delay is not null then\n        (avg_delay_hours - prev_2qtr_delay) / 2  -- Average change per quarter over last 2 quarters\n      when prev_qtr_delay is not null then\n        (avg_delay_hours - prev_qtr_delay)       -- Change over last quarter\n      else null\n    end as quarterly_avg_change\n  from port_trends\n),\n\nport_info as (\n  select\n    port_code,\n    port_city,\n    port_country,\n    latitude,\n    longitude\n  from BUSINESS_INT_DBT.PUBLIC_core.dim_port\n)\n\nselect\n  t.*,\n  p.port_city,\n  p.port_country,\n  p.latitude,\n  p.longitude,\n  \n  -- Calculate quarter-over-quarter change\n  (avg_delay_hours - prev_qtr_delay) as qoq_delay_change,\n  case when prev_qtr_delay != 0 \n       then (avg_delay_hours - prev_qtr_delay) / nullif(abs(prev_qtr_delay), 0) * 100 \n       else null \n  end as qoq_delay_pct_change,\n  \n  -- Calculate year-over-year change\n  (avg_delay_hours - prev_year_delay) as yoy_delay_change,\n  case when prev_year_delay != 0 \n       then (avg_delay_hours - prev_year_delay) / nullif(abs(prev_year_delay), 0) * 100 \n       else null \n  end as yoy_delay_pct_change,\n  \n  -- Performance trend categorization using average change instead of regression slope\n  case\n    when quarterly_avg_change < -1 then 'Improving'\n    when quarterly_avg_change > 1 then 'Deteriorating'\n    else 'Stable'\n  end as trend_category,\n  \n  -- Create rank fields for top improving/deteriorating ports\n  row_number() over (\n    partition by snapshot_quarter, port_role,\n    case when quarterly_avg_change < -1 then 1 else 0 end\n    order by quarterly_avg_change asc\n  ) as improvement_rank,\n  \n  row_number() over (\n    partition by snapshot_quarter, port_role,\n    case when quarterly_avg_change > 1 then 1 else 0 end\n    order by quarterly_avg_change desc\n  ) as deterioration_rank,\n  \n  current_timestamp() as load_ts\nfrom trend_calculation t\njoin port_info p on t.port_code = p.port_code", "relation_name": "BUSINESS_INT_DBT.PUBLIC_marts.mart_port_performance", "batch_results": null}], "elapsed_time": 16.282454013824463, "args": {"log_path": "C:\\Users\\Mattia\\Business_Int\\shipping-insights-dbt-docs\\logs", "version_check": true, "use_colors": true, "require_explicit_package_overrides_for_builtin_materializations": true, "log_level": "info", "write_json": true, "which": "generate", "require_resource_names_without_spaces": false, "partial_parse": true, "log_format_file": "debug", "warn_error_options": {"include": [], "exclude": []}, "profiles_dir": "C:\\Users\\Mattia\\.dbt", "cache_selected_only": false, "log_format": "default", "require_yaml_configuration_for_mf_time_spines": false, "populate_cache": true, "static": false, "indirect_selection": "eager", "strict_mode": false, "static_parser": true, "require_batched_execution_for_custom_microbatch_strategy": false, "project_dir": "C:\\Users\\Mattia\\Business_Int\\shipping-insights-dbt-docs", "quiet": false, "invocation_command": "dbt docs generate", "log_file_max_bytes": 10485760, "use_colors_file": true, "empty_catalog": false, "defer": false, "partial_parse_file_diff": true, "log_level_file": "debug", "compile": true, "favor_state": false, "state_modified_compare_more_unrendered_values": false, "print": true, "select": [], "show_resource_report": false, "printer_width": 80, "send_anonymous_usage_stats": true, "state_modified_compare_vars": false, "introspect": true, "exclude": [], "require_nested_cumulative_type_params": false, "skip_nodes_if_on_run_start_fails": false, "vars": {}, "source_freshness_run_project_hooks": false, "macro_debugging": false}}